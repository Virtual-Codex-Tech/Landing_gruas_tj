# docker.compose.yml — configuración pensada para desarrollo
# Levanta el frontend (Vite) en modo dev y el servidor Node (Express) que maneja /send-email.
# Uso (desde la raíz del repo):
#   docker compose -f docker.compose.yml up --build
# Recomendación: para producción se puede añadir un Dockerfile para el frontend (build estático) y servirlo con nginx.

version: "3.8"
services:
  frontend:
    image: node:18
    container_name: gruasjt_frontend
    working_dir: /app
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      # Vite necesita escuchar en 0.0.0.0 para exponerse fuera del contenedor
      - PORT=5173
      - CHOKIDAR_USEPOLLING=true
    command: sh -c "npm install --no-audit --no-fund && npm run dev -- --host 0.0.0.0"
    ports:
      - "5173:5173"
    depends_on:
      - server

  server:
    image: node:18
    container_name: gruasjt_server
    working_dir: /usr/src/app
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - PORT=5000
    # index.js usa process.env.PORT || 5000
    command: sh -c "npm install --no-audit --no-fund && node index.js"
    ports:
      - "5000:5000"

# Volúmenes anónimos para evitar que node_modules del host machaque el contenedor
volumes:
  node_modules_frontend:
  node_modules_server:

# Notas:
# - Esta configuración es para desarrollo local. Monta el código fuente para que los cambios se reflejen inmediatamente.
# - Si prefieres no instalar dependencias en cada arranque, crea Dockerfiles para frontend y server, construye las imágenes y quita los "npm install" en los comandos.
# - Producción: 1) "npm run build" en frontend dentro de un Dockerfile; 2) copiar build a un contenedor nginx para servir archivos estáticos; 3) ejecutar server en su propio contenedor.
# - Para usar HTTPS, variables de entorno o secretos, usa un archivo .env y referéncialo con "env_file:" o configura un secreto del runtime.
